import"./reddit-page-data-cd50413e.js";import{q as e,_ as t,t as i,s,e as n,f as r,u as o,x as a,n as d,g as c,h as l,ag as p,ak as u}from"./shell-5af0f000.js";import"./shreddit-share-list-item-19bd3ea7.js";import{F as b}from"./shreddit-subreddit-header-977919e1.js";import"./faceplate-hovercard-15a6b6c3.js";import"./open-interstitial-modal-c9ece955.js";import"./confirm-over-18-d6b770da.js";import"./faceplate-expandable-section-helper-de878c08.js";import"./faceplate-auto-height-animator-d31490f3.js";import"./guard-community-modal-620e8675.js";import"./faceplate-text-input-ee0cc7e1.js";import"./icon-warning-fill-bd58265c.js";import"./icon-notification-fill-24d3de37.js";import"./icon-notification-off-outline-2af0d7f2.js";import"./icon-notification-outline-25362658.js";import"./icon-overflow-horizontal-outline-df08f276.js";import"./feeds-2b5c2bbf.js";import"./faceplate-tooltip-53bb95ec.js";import"./icon-privacy-outline-d1e8303d.js";import"./ref-f4a25b5a.js";const h=e(s);let m=class extends h{constructor(){super(...arguments),this.bannerEventData=null}static get styles(){return[r]}connectedCallback(){super.connectedCallback(),this.subscribe(o.TriggerFeedErrorBanner,(e=>{e.type===b.Show?this.bannerEventData=e.data??null:this.bannerEventData=null}))}render(){if(!this.bannerEventData)return"";const{multiLine:e,msg:t,appearance:i,shape:s,className:n,children:r}=this.bannerEventData;return a` <faceplate-banner \n class="${n}" \n ?multiLine="${e}" \n appearance="${i}" \n shape="${s}" \n msg="${t}" \n>\n ${r}\n </faceplate-banner>`}};t([i()],m.prototype,"bannerEventData",void 0),m=t([n("shreddit-feed-error-banner")],m);const f=e(s);let v=class extends f{constructor(){super(...arguments),this.name="",this.subredditId="",this.prefixedName="",this.notificationLevel="",this.isModerator=!1,this.isSubscribed=!1,this.isMuted=!1,this.isFavorite=!1,this.isUserLoggedIn=!1,this.onSubscriptionChange=e=>{this.name===e.name&&(this.isSubscribed=e.subscribed)}}static get styles(){return[r]}firstUpdated(){this.subscribe(o.SubredditSubscriptionChange,this.onSubscriptionChange)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(o.SubredditSubscriptionChange,this.onSubscriptionChange)}render(){return a` <div class="flex items-center gap-sm">\n ${this.isUserLoggedIn?a`<shreddit-subreddit-overflow-control \n name="${this.name}" \n prefixed-name="${this.prefixedName}" \n subreddit-id="${this.subredditId}" \n ?is-muted="${this.isMuted}" \n ?is-favorite="${this.isFavorite}" \n ?subscribed="${this.isSubscribed}" \n ?show-join-button="${this.isModerator}" \n></shreddit-subreddit-overflow-control>`:""}\n ${this.isSubscribed?a` <shreddit-notification-frequency-control \n subreddit-id="${this.subredditId}" \n notification-level="${this.notificationLevel}" \n></shreddit-notification-frequency-control>`:""}\n ${this.isModerator?c({appearance:"primary",size:l.Small,attributes:{href:`/${this.prefixedName}/about/modqueue`,className:"modtools-btn"},children:"Mod Tools"}):a`<faceplate-tracker \n source="community" \n action="click" \n noun="${this.isSubscribed?"unsubscribe":"subscribe"}" \n>\n <shreddit-join-button \n name="${this.name}" \n subreddit-id="${this.subredditId}" \n button-classes="px-sm py-xs" \n subscribe-label="Join" \n unsubscribe-label="Joined" \n unsubscribe-button-type-override="bordered" \n ?subscribed="${this.isSubscribed}" \n></shreddit-join-button></faceplate-tracker>`}\n </div>`}};t([d({type:String})],v.prototype,"name",void 0),t([d({type:String,attribute:"subreddit-id"})],v.prototype,"subredditId",void 0),t([d({type:String,attribute:"prefixed-name"})],v.prototype,"prefixedName",void 0),t([d({type:String,attribute:"notification-level"})],v.prototype,"notificationLevel",void 0),t([d({type:Boolean,attribute:"is-moderator"})],v.prototype,"isModerator",void 0),t([d({type:Boolean,attribute:"is-subscribed"})],v.prototype,"isSubscribed",void 0),t([d({type:Boolean,attribute:"is-muted"})],v.prototype,"isMuted",void 0),t([d({type:Boolean,attribute:"is-favorite"})],v.prototype,"isFavorite",void 0),t([d({type:Boolean,attribute:"is-user-logged-in"})],v.prototype,"isUserLoggedIn",void 0),v=t([n("shreddit-subreddit-header-buttons")],v);let g=class extends s{constructor(){super(...arguments),this.container=null,this.dropdowns=null,this.containerSelector="html",this.hideDropdowns=()=>{this.dropdowns?.length&&[...this.dropdowns].forEach((e=>e.close()))},this.hideDropdownsDebounced=p(this.hideDropdowns,200,{leading:!0,trailing:!0})}connectedCallback(){super.connectedCallback(),this.container=document.querySelector(this.containerSelector),this.container&&(this.container.addEventListener("scroll",this.hideDropdownsDebounced,{passive:!0}),this.dropdowns=this.container.getElementsByTagName("faceplate-dropdown-menu"))}disconnectedCallback(){super.disconnectedCallback(),this.container&&this.container.removeEventListener("scroll",this.hideDropdownsDebounced)}render(){return u}};t([d({type:String,attribute:"container-selector"})],g.prototype,"containerSelector",void 0),g=t([n("dropdown-close-on-scroll")],g);
//# sourceMappingURL=subreddit-feed-client-js-900c028f.js.map
